
def getPublicKey():
    p = 53
    q = 47
    e = 3
    n = p*q;
    print("n value =",n)
    print("e value =",e)
    return e,n
    
def getPrivateKey():
    p = 53
    q = 47
    e = 3
    phi = (p-1)*(q-1)
    d = pow(e,-1,phi)
    return d   

def genSignature(msg,d,n):

    sig = (msg ** d % n)
    print("Signature is",sig)
    return sig

def verifySignature(msg,e,sig,n):
    msg_prime = (sig ** e % n)
    msg_prime = round(msg_prime)
    if (msg == msg_prime):
        print("Message is valid")
    else: print("invalid message")

def forgedSignature(msg): #Creates a forged signature to a message
    f_sig = (msg ** (1/3))
    print("Forged Signature =",f_sig)
    return f_sig

print("Welcome!\n1.generate signature and verify using legal means"+
"\n2.forge a valid signature as an illegal user using the e = 3 exploit")

option = input("choose an option\n")

if (option == '1'):
    # p,q = int(input("enter p,q values\n").split())
    msg = int(input("please enter a message\n"))
    e,n = getPublicKey()
    d = getPrivateKey()
    signature = genSignature(msg,d,n) 
    verifySignature(msg,e,signature,n)  

elif(option == '2'):
    msg = int(input("please enter a message\n"))
    e,n = getPublicKey()
    signature = forgedSignature(msg)
    print(signature)
    verifySignature(msg,e,signature,n)
else:
    print("invalid input")    

     
